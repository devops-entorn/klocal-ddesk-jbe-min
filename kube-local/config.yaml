# This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c
# Chart config reference:   https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html
# Chart default values:     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml
# Available chart versions: https://jupyterhub.github.io/helm-chart/
#
proxy:
  https:
    enabled: true
 #   hosts:
 #     - my.entorn.io
 #   letsencrypt:
 #     contactEmail: orboan@pluralcamp.com
  # only the proxy's secretToken is required
  secretToken: c3a6b7b6c89839e448e5f85f30fcd51d521921a0d5e7ecbc55d2e5c098612648
  service:
    type: ClusterIP
singleuser:
  defaultUrl: "/lab"
  memory:
    limit: 5G
    guarantee: 4G
  cpu:
    limit: 4
    guarantee: 2
  uid: 0
  extraEnv:
    CHOWN_HOME: 'yes'
    CHOWN_HOME_OPTS: '-R'
    DOCKER_HOST: 'tcp://localhost:2375'
    GRANT_SUDO: "yes"
    NOTEBOOK_ARGS: "--allow-root"
    SUDOERS_ALL: "true"
  storage:
    extraVolumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
      - name: docker-sock-{username}
        emptyDir: {}
      - name: docker-data-{username}
        persistentVolumeClaim:
          claimName: dockerdata-claim-{username}
      - name: apps
        persistentVolumeClaim:
          claimName: apps-claim
      - name: dbdata-{username}
        persistentVolumeClaim:
          claimName: dbdata-claim-{username}
      - name: conda-envs
        persistentVolumeClaim:
          claimName: conda-envs-claim
      - name: nbgrader-exchange
        persistentVolumeClaim:
          claimName: exchange-claim
    extraVolumeMounts:
      - name: shm-volume
        mountPath: /dev/shm
      - name: docker-data-{username}
        mountPath: /var/lib/docker
      - name: apps
        mountPath: /opt/apps
      - name: dbdata-{username}
        mountPath: /opt/dbdata-{username}
      - name: conda-envs
        mountPath: /opt/conda/envs
      - name: nbgrader-exchange
        mountPath: /usr/local/share/nbgrader/exchange 
      - name: docker-sock-{username}
        mountPath: /run
    homeMountPath: /home/{username}
    dynamic:
      storageClass: hostpath 
    capacity: 25Gi
  image:
    name: entorn-io/singleuser-javaweb 
    tag: 0.1.0
    pullPolicy: IfNotPresent
  profileList:
    - display_name: "Entorn Java Backend"
      description: "Entorn v0.1.0"
      kubespawner_override:
        extra_containers:
          - name: docker
            image: entorn-io/dind:0.1.0
            imagePullPolicy: IfNotPresent
            env:
              - name: DOCKER_TLS_CERTDIR
                value: ''
            securityContext: 
              privileged: true 
            volumeMounts: 
              - name: docker-data-{username}
                mountPath: /var/lib/docker 
              - name: volume-{username}
                mountPath: /home/{username}
              - name: docker-sock-{username}
                mountPath: /run
              - name: dbdata-{username}
                mountPath: /opt/dbdata-{username}                
        security_context:
          privileged: true
          fsGroup: 100
cull:
  enabled: false
hub:
  image:
    name: entorn-io/hub-jbe
    tag: 0.1.0
    pullPolicy: IfNotPresent
  config:
    #JupyterHub:
    #  authenticator_class: ltiauthenticator.lti11.MyLTIAuthenticator # LTI 1.1
    #LTIAuthenticator:
    #  consumers: { "client-key": "client-secret" }
    extraEnv:
      INGRESS_PUBLIC_IP: "xxx.xxx.xxx.xxx"
      # LTI_AUTH_CONSUMER_URL: 'https://lms.pluralcamp.com'
      #    DummyAuthenticator:
      #      password: pluralcamp
      #    JupyterHub:
      #      authenticator_class: dummy
      #    Authenticator:
      #      admin_users:
      #        - orboan
  extraConfig:
    lti-auth: |
          c.JupyterHub.authenticator_class = MyLTIAuthenticator
    spawner: |
      #import os
      #ingress_public_ip = os.environ["USER"]
      c.Spawner.cmd = ['start.sh','jupyterhub-singleuser','--allow-root']
      def notebook_dir_hook(spawner):
          is_instructor='false'
          for instructor in instructors:
              f = open("/home/entorn/instructor.out", "a")
              f.write(f"spawner.user.name = {spawner.user.name} - instructor id = {instructor['id']}")
              f.close()
              if spawner.user.name == instructor['id']:
                  is_instructor='true'
                  break
          spawner.environment = {'NB_USER':spawner.user.name,'NB_UID':'1000','IS_INSTRUCTOR':is_instructor, 'CHOWN_HOME':'yes', 'CHOWN_HOME_OPTS':'-R', 'DOCKER_HOST':'tcp://localhost:2375', 'GRANT_SUDO':"yes",'NOTEBOOK_ARGS':"--allow-root", 'SUDOERS_ALL': "true", 'INGRESS_PUBLIC_IP': "10.101.35.239"}
      c.Spawner.pre_spawn_hook = notebook_dir_hook
    security: |
      from kubernetes_asyncio import client
      def modify_pod_hook(spawner, pod):
        pod.spec.containers[0].security_context = client.V1SecurityContext(
            privileged=True,
            capabilities=client.V1Capabilities(
                add=['SYS_ADMIN']
            )
        )
        return pod
      c.KubeSpawner.modify_pod_hook = modify_pod_hook
      c.JupyterHub.admin_access = True
ingress:
  enabled: true
  hosts:
    - local.entorn.io
    #- host: local.entorn.io
    #  paths:
    #    - path: /
    #      pathType: Prefix
    #      backend:
    #        serviceName: $name 
    #        servicePort: 8888
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-port-in-redirects: "false"
    nginx.ingress.kubernetes.io/healthcheck-port: '8443'
    nginx.ingress.kubernetes.io/ssl-redirect: '443'
    nginx.ingress.kubernetes.io/auth-keepalive: '32'
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      set $user 'user-redirect';
      #rstudio
      if ( $http_referer ~ ".*user\/(?<user_id>[\w-\.\w-]+)\/lab$" ) {
            rewrite ^/(?<arg_suffix>auth-sign-in.*) "https://$server_name/user/$user_id/rstudio/$arg_suffix";
      }      
      ## jetty
      if ( $http_referer ~ ".*user\/(?<user_id>[\w\-\.\w\-]+)\/jetty\/.*$" ) {
        rewrite ^/hub/(?<arg_suffix>.*) "https://$server_name/user/$user_id/jetty/${arg_suffix}" break;
      }
      ## jenkins
      #set $jenk 0;
      #if ($http_referer ~ ".*user\/(?<user_id>[\w\-\.\w\-]+)\/jenkins\/.*$") {
      #  set $jenk 1;
      #  set $user $user_id;
      #}
      #if ($request_uri ~ ".*user\/(?<user_id>[\w\-\.\w\-]+)\/jenkins\/.*$") {
      #  set $jenk 1;
      #  set $user $user_id;
      #}
      #if ( $request_uri ~ ".*pluginManager\/(.*)$" ){
      #  rewrite "^/pluginManager/(?<arg_suffix>.*)"  "https://$server_name/user/$user_id/jenkins/pluginManager/${arg_suffix}" break;
      #}      
      #if ($jenk = 1) {
      #  rewrite ^/hub/(?<arg_suffix>.*) "https://$server_name/user/$user_id/jenkins/${arg_suffix}" break;
      #  rewrite ^/user/$user_id/jenkins/user/$user_id/jenkins/(?<arg_suffix>.*) "https://$server_name/user/$user_id/jenkins/${arg_suffix}" break;
      #}
      ### pgadmin
      set $pg 0;
      if ($http_referer ~ ".*user\/(?<user_id>[\w\-\.\w\-]+)\/pgadmin\/.*$") {
        set $pg 1;
        set $user $user_id;
      }
      if ($request_uri ~ ".*user\/(?<user_id>[\w\-\.\w\-]+)\/pgadmin\/.*$") {
        set $pg 1;
        set $user $user_id;
      }
      if ($pg = 1) {
        rewrite ^/hub/(?<arg_suffix>.*) "https://$server_name/user/$user_id/pgadmin/${arg_suffix}" break;
      }

      proxy_hide_header Allow;
      proxy_hide_header X-Frame-Options;
      proxy_hide_header Content-Security-Policy;
      proxy_hide_header X-XSS-Protection;
      proxy_hide_header X-Content-Type-Options;
      proxy_hide_header X-Forwarded-Port;
      
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        #
        # Custom headers and headers various browsers *should* be OK with but aren't
        #
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        #
        # Tell client that this pre-flight info is valid for 20 days
        #
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        add_header 'Allow' 'GET, POST, OPTIONS' always;
        add_header 'X-Frame-Options' '""' always;
        return 204;
      }
      if ($request_method = 'POST') {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        add_header 'Allow' 'GET, POST, OPTIONS' always;
        add_header 'X-Frame-Options' '""' always;
      }
      if ($request_method = 'GET') {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        add_header 'Allow' 'GET, POST, OPTIONS' always;
        add_header 'X-Frame-Options' '""' always;
      }

      proxy_set_header X-Script-Name /user/$user/pgadmin;

      #Jenkins
      add_header 'Location' "$host" always;
      proxy_set_header Connection ""; # Clear for keepalive
      client_body_buffer_size    128k;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;

      #proxy_max_temp_file_size 0;

      #proxy_connect_timeout      150;
      #proxy_send_timeout         100;
      #proxy_read_timeout         100;
      #proxy_buffer_size          8k;
      #proxy_buffers              4 32k;
      #proxy_busy_buffers_size    64k;
      #proxy_temp_file_write_size 64k;

      # Jenkins HTTP based CLI requires HTTP 1.1
      #proxy_http_version       1.1;

      # JENKINS-43666 and tests confirm it helps to disable proxy_request_buffering
      #proxy_request_buffering  off;

      # JENKINS-45651 notes that X-SSH-Endpoint header is not provided unless auth succeeds
      # ssh authentication for CLI will fail unless the X-SSH-Endpoint header is added
      add_header 'X-SSH-Endpoint' 'local.entorn.io:50000' always;

